# 29. 배달 / 최단경로 - 플로이드 와샬과 다익스트라
# https://programmers.co.kr/learn/courses/30/lessons/12978
# ----------------------------------------------------------------------------------------
# 문제 설명

# N개의 마을로 이루어진 나라가 있습니다. 이 나라의 각 마을에는 1부터 N까지의 번호가 각각 하나씩 부여되어 있습니다. 
# 각 마을은 양방향으로 통행할 수 있는 도로로 연결되어 있는데, 서로 다른 마을 간에 이동할 때는 이 도로를 지나야 합니다. 
# 도로를 지날 때 걸리는 시간은 도로별로 다릅니다. 현재 1번 마을에 있는 음식점에서 각 마을로 음식 배달을 하려고 합니다. 
# 각 마을로부터 음식 주문을 받으려고 하는데, N개의 마을 중에서 K 시간 이하로 배달이 가능한 마을에서만 주문을 받으려고 합니다. 다음은 N = 5, K = 3인 경우의 예시입니다.

# 그림

# 위 그림에서 1번 마을에 있는 음식점은 [1, 2, 4, 5] 번 마을까지는 3 이하의 시간에 배달할 수 있습니다. 
# 그러나 3번 마을까지는 3시간 이내로 배달할 수 있는 경로가 없으므로 3번 마을에서는 주문을 받지 않습니다.
#  따라서 1번 마을에 있는 음식점이 배달 주문을 받을 수 있는 마을은 4개가 됩니다.
# 마을의 개수 N, 각 마을을 연결하는 도로의 정보 road, 음식 배달이 가능한 시간 K가 매개변수로 주어질 때, 음식 주문을 받을 수 있는 마을의 개수를 return 하도록 solution 함수를 완성해주세요.
# ----------------------------------------------------------------------------------------
# 제한사항

# 마을의 개수 N은 1 이상 50 이하의 자연수입니다.
# road의 길이(도로 정보의 개수)는 1 이상 2,000 이하입니다.
# road의 각 원소는 마을을 연결하고 있는 각 도로의 정보를 나타냅니다.

# road는 길이가 3인 배열이며, 순서대로 (a, b, c)를 나타냅니다.
# a, b(1 ≤ a, b ≤ N, a != b)는 도로가 연결하는 두 마을의 번호이며, c(1 ≤ c ≤ 10,000, c는 자연수)는 도로를 지나는데 걸리는 시간입니다.

# 두 마을 a, b를 연결하는 도로는 여러 개가 있을 수 있습니다.
# 한 도로의 정보가 여러 번 중복해서 주어지지 않습니다.
# K는 음식 배달이 가능한 시간을 나타내며, 1 이상 500,000 이하입니다.
# 임의의 두 마을간에 항상 이동 가능한 경로가 존재합니다.
# 1번 마을에 있는 음식점이 K 이하의 시간에 배달이 가능한 마을의 개수를 return 하면 됩니다.

# 입출력 예

# N	/ road	                                                    / K	    / result
# 5	/ [[1,2,1],[2,3,3],[5,2,2],[1,4,2],[5,3,1],[5,4,2]]	        / 3	    / 4
# 6	/ [[1,2,1],[1,3,2],[2,3,2],[3,4,3],[3,5,2],[3,5,3],[5,6,1]]	/ 4	    / 4

# 입출력 예 설명

# 입출력 예 #1
# 문제의 예시와 같습니다.

# 입출력 예 #2

# 1번 마을에서 배달에 4시간 이하가 걸리는 마을은 [1, 2, 3, 5] 4개이므로 4를 return 합니다.

# ---------문제 해석---------------------------------------------------------------------- 
# 모든 마을은 연결되어 있다
# 같은 마을 간에도 도로가 여러 개 있을 수 있으므로, 짧은 도로를 선택하도록 해야 한다.
# 항상 1번 마을부터 시작한다
# 1번마을에서 1번마을로 배달은 항상 가능하므로, return의 기본값은 1이다

# ---------접근 방법---------------------------------------------------------------------- 
# 항상 1번 마을로부터 시작하므로, 다익스트라 알고리즘으로 접근한다
# 1번마을에서 다른 모든 마을까지의 최단 경로를 각각 구해보고, 값이 k 이하인 경우에 count 한다 

# ----------------------------------------------------------------------------------------

N1, N2 = 5, 6
road1 , road2 = [[1,2,1],[2,3,3],[5,2,2],[1,4,2],[5,3,1],[5,4,2]] ,[[1,2,1],[1,3,2],[2,3,2],[3,4,3],[3,5,2],[3,5,3],[5,6,1]] 
K1, K2 = 3, 4

def solution(N, road, K):
    answer = 0
    distance = [10000*N+1 for _ in range(N)]  #거리배열 생성
    visited = []
    distance[0] = 0       #1번마을의 거리를 0으로
    visited.append(1)

    depart = 1         #1번마을에서 출발
    while len(visited) < N:
        checkDis = []                  #이번 회차에 방문한 마을들의 거리
        checkVisit = []                #이번 회차에 방문한 마을들

        for town1, town2, time in road:       #도로 배열을 순환하면서 탐색
            if (town1 == depart) and (town2 not in visited):     #출발한 마을이 일치하고, 방문한 적이 없으면
                distance[town2-1] = min(distance[town2-1], distance[depart-1]+time)   #도착마을까지의 [기존 거리]와 [출발마을을 통한 거리] 중 최솟값으로 설정
                checkDis.append(distance[town2-1])    #방문여부 검증을 위한 설정
                checkVisit.append(town2)              #방문여부 검증을 위한 설정
            elif (town2 == depart) and (town1 not in visited):
                distance[town1-1] = min(distance[town1-1], distance[depart-1]+time)
                checkDis.append(distance[town1-1])
                checkVisit.append(town1)
            elif town1 not in visited and town2 in visited:     #방문하지 않고 지나간 마을이 있을 때, 재방문(길이 하나 뿐일 떄)
                distance[town1-1] = min(distance[town1-1], distance[town2-1] + time)
                checkDis.append(distance[town1-1])
                checkVisit.append(town1)
            elif town2 not in visited and town1 in visited:
                distance[town2-1] = min(distance[town2-1], distance[town1-1] + time)
                checkDis.append(distance[town2-1])
                checkVisit.append(town2)

        depart = checkVisit[checkDis.index(min(checkDis))]    #이번 회차의 최단거리 마을을 출발지로 설정 
        visited.append(depart)

    answer = len(list(filter(lambda x: x <= K, distance)))
    return answer

print(solution(N1, road1, K1))
# print(solution(N2, road2, K2))

# result1 = 4
# result2 = 4

# ----------------------------------------------------------------------------------------

# 프로그래머스 코드정확도 채점 - 합계:  100.0 / 100.0

# 노드 관련 문제 - 거리배열과 방문배열 두 개 생성하기 
# 최단거리 계산하느라 지나가버린 노드 챙기기

# --------------------------------------------------------------------------------------


# ---------1차 오답---------------------------------------------------------------------- 
# 1. => False로 되어있는 마을들을 방문하지 않고 종료하는 문제
# ----------------------------------------------------------------------------------------
# N1, N2 = 5, 6
# road1 , road2 = [[1,2,1],[2,3,3],[5,2,2],[1,4,2],[5,3,1],[5,4,2]] ,[[1,2,1],[1,3,2],[2,3,2],[3,4,3],[3,5,2],[3,5,3],[5,6,1]] 
# K1, K2 = 3, 4

# def solution(N, road, K):
#     answer = 0
#     distance = [10000*N+1 for _ in range(N)]  #거리배열 생성
#     visited = [False for _ in range(N)]       #방문배열 생성
#     distance[0] = 0       #1번마을의 거리를 0으로
#     visited[0] = True     #1번마을의 방문여부를 True로

#     depart = 1         #1번마을에서 출발
#     while False in visited:        #모든 마을을 방문할 때까지 반복
#         checkDis = []                  #이번 회차에 방문한 마을들의 거리
#         checkVisit = []                #이번 회차에 방문한 마을들
#         for town1, town2, time in road:       #도로 배열을 순환하면서 탐색
#             if (town1 == depart) and (visited[town2-1] == False):     #출발한 마을이 일치하고, 방문한 적이 없으면
#                 distance[town2-1] = min(distance[town2-1], distance[depart-1]+time)   #도착마을까지의 [기존 거리]와 [출발마을을 통한 거리] 중 최솟값으로 설정
#                 checkDis.append(distance[town2-1])    #방문여부 검증을 위한 설정
#                 checkVisit.append(town2)              #방문여부 검증을 위한 설정
#             elif (town2 == depart) and (visited[town1-1] == False):
#                 distance[town1-1] = min(distance[town1-1], distance[depart-1]+time)
#                 checkDis.append(distance[town1-1])
#                 checkVisit.append(town1)

#         if len(checkDis) == 0:    #모든 도로를 순환했을 때, 남는 마을을 최단거리 및 방문함으로 설정
#             break
#         depart = checkVisit[checkDis.index(min(checkDis))]    #이번 회차의 최단거리 마을을 출발지로 설정 
#         visited[depart-1] = True

#     answer = len(list(filter(lambda x: x <= K, distance)))
#     return answer

# print(solution(N1, road1, K1))
# print(solution(N2, road2, K2))

# result1 = 4
# result2 = 4

# ----------------------------------------------------------------------------------------

# 프로그래머스 코드정확도 채점 - 합계: 81.3 / 100.0

# 테스트 1 〉	통과 (0.05ms, 10.3MB)
# 테스트 2 〉	통과 (0.03ms, 10.4MB)
# 테스트 3 〉	통과 (0.06ms, 10.3MB)
# 테스트 4 〉	통과 (0.02ms, 10.4MB)
# 테스트 5 〉	통과 (0.04ms, 10.3MB)
# 테스트 6 〉	실패 (0.03ms, 10.3MB)
# 테스트 7 〉	통과 (0.04ms, 10.3MB)
# 테스트 8 〉	통과 (0.05ms, 10.3MB)
# 테스트 9 〉	통과 (0.02ms, 10.3MB)
# 테스트 10 〉	통과 (0.06ms, 10.3MB)
# 테스트 11 〉	실패 (0.07ms, 10.4MB)
# 테스트 12 〉	실패 (0.11ms, 10.3MB)
# 테스트 13 〉	실패 (0.05ms, 10.3MB)
# 테스트 14 〉	통과 (2.03ms, 10.3MB)
# 테스트 15 〉	통과 (5.69ms, 10.4MB)
# 테스트 16 〉	실패 (0.14ms, 10.3MB)
# 테스트 17 〉	실패 (0.05ms, 10.4MB)
# 테스트 18 〉	통과 (1.01ms, 10.3MB)
# 테스트 19 〉	통과 (6.61ms, 10.4MB)
# 테스트 20 〉	통과 (1.08ms, 10.3MB)
# 테스트 21 〉	통과 (4.31ms, 10.4MB)
# 테스트 22 〉	통과 (1.17ms, 10.4MB)
# 테스트 23 〉	통과 (4.54ms, 10.4MB)
# 테스트 24 〉	통과 (2.88ms, 10.4MB)
# 테스트 25 〉	통과 (6.58ms, 10.5MB)
# 테스트 26 〉	통과 (6.76ms, 10.4MB)
# 테스트 27 〉	통과 (5.56ms, 10.5MB)
# 테스트 28 〉	통과 (6.51ms, 10.5MB)
# 테스트 29 〉	통과 (6.19ms, 10.4MB)
# 테스트 30 〉	통과 (11.33ms, 10.5MB)
# 테스트 31 〉	통과 (0.37ms, 10.3MB)
# 테스트 32 〉	통과 (0.50ms, 10.3MB)


