#2.기능개발 #스택과 큐(stack & prices) 
# https://programmers.co.kr/learn/courses/30/lessons/42586

# ----------------------------------------------------------------------------------------
# 문제 설명
# 프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.
# 또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.
# 먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.

# 제한 사항
# 작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.
# 작업 진도는 100 미만의 자연수입니다.
# 작업 속도는 100 이하의 자연수입니다.
# 배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.

# 입출력 예
# progresses                	speeds	            return
# [93, 30, 55]              	[1, 30, 5]          [2, 1]
# [95, 90, 99, 99, 80, 99]	    [1, 1, 1, 1, 1, 1]	[1, 3, 2]

# 입출력 예 설명
# 입출력 예 #1
# 첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다.
# 두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다. 하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다.
# 세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다.
# 따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다.

# 입출력 예 #2
# 모든 기능이 하루에 1%씩 작업이 가능하므로, 작업이 끝나기까지 남은 일수는 각각 5일, 10일, 1일, 1일, 20일, 1일입니다. 어떤 기능이 먼저 완성되었더라도 앞에 있는 모든 기능이 완성되지 않으면 배포가 불가능합니다.
# 따라서 5일째에 1개의 기능, 10일째에 3개의 기능, 20일째에 2개의 기능이 배포됩니다.
# ----------------------------------------------------------------------------------------
# 문제 해석
# 각 기능들은 개발되는 속도가 다르지만, 배포되는 순서는 정해져 있다. 
# 하루단위로 작업이 이루어지고, 작업이 끝났을 때 진도가 100% 이상이라면 배포된다. 
# 이미 진도가 100% 이상인 기능이라도 배포되려면 선행 기능이 배포되어야한다. 
# 100% 이상인 기능들은 순서가 맞으면 같이 배포한다.

# 접근 방법
# 작업이 완성되어 기능을 내보내려면 가장 선행되는 기능을 먼저 내보내야하므로, 스택의 개념을 사용해 본다.
# 매 순환을 하루단위로 잡고, 순환마다 작업속도(speeds)의 값이 쌓이도록 계획을 세워본다.
# 작업속도의 값이 쌓여 배포조건(100% 이상)을 충족하면, 1을 더하여 배포준비가 되었음을 표시하되, 선행 기능이 배포될떄가지 대기하도록 식을 구상해본다.
# ----------------------------------------------------------------------------------------
# progresses1, progresses2 = [93, 30, 55] , [95, 90, 99, 99, 80, 99]
# speeds1, speeds2 = [1, 30, 5] , [1, 1, 1, 1, 1, 1]

# def solution(pro, spd):
#     answer = []
#     ready = 0     # 배포준비된 기능의 개수
#     while len(pro) > 0:              # 모든 기능이 배포될 때까지 반복 
#         while pro[0] < 100:               # 가장 앞쪽의 기능이 '완성되기 전까지' 반복 -------------->> 완성되지 않은 기능이 남아있으면 작동
#             if ready > 0:   # 배포준비된 기능이 있다면 '모두 배포'----------------------------->> 완성되지 않은 기능이 남아있어야 배포
#                 answer.append(ready) 
#                 ready = 0   # 배포 후 초기화            
#             else:
#                 for i in range(len(pro)):           
#                     if pro[i] < 100:          # 완성되지 않은 기능들을 대상으로 
#                         pro[i] += spd[i]      # 모든 기능의 작업진도에 작업속도를 한 번씩 더하기 
#         ready += 1    
#         pro.pop(0)    # 배포준비된 기능을 가장 앞쪽부터 내보냄      

#     return answer

# print(solution(progresses1, speeds1)) 
# print(solution(progresses2, speeds2)) 
# ----------1차 오답 -- [2], [1,3]
# 시도
# - 완성된 기능들을 배포준비시켜놓고, 완성되지 않은 기능이 나타나면 한꺼번에 배포하도록 식을 구성했다. 
# 문제
# - 기능들이 모두 완성되어 배포준비되어 있으면 완성되지 않은 기능이 없으므로 배포하지 않고 종료되어 버린다. 
# ----------------------------------------------------------------------------------------
progresses1, progresses2 = [93, 30, 55] , [95, 90, 99, 99, 80, 99]
speeds1, speeds2 = [1, 30, 5] , [1, 1, 1, 1, 1, 1]

def solution(pro, spd):
    answer = []
    ready = 0     # 배포준비된 기능의 개수
    while len(pro) > 0:              # 모든 기능이 배포될 때까지 반복 
        while pro[0] < 100:               # 가장 앞쪽의 기능이 '완성되기 전까지' 반복 
            if ready > 0:   # 배포준비된 기능이 있다면 '모두 배포'
                answer.append(ready) 
                ready = 0   # 배포 후 초기화            
            else:
                for i in range(len(pro)):           
                    if pro[i] < 100:          # 완성되지 않은 기능들을 대상으로 
                        pro[i] += spd[i]      # 모든 기능의 작업진도에 작업속도를 한 번씩 더하기 
        ready += 1    
        pro.pop(0)    # 배포준비된 기능을 가장 앞쪽부터 내보냄          
# ----------------------------------------------------------------------------------------         
    if ready > 0:     
        answer.append(ready)   # '모든' 기능들이 완성되어 배포준비 되었을 경우, 준비된 것들을 모두 배포
# ----------------------------------------------------------------------------------------
    return answer

print(solution(progresses1, speeds1))
print(solution(progresses2, speeds2))

# return1 = [2, 1]
# return2 = [1, 3, 2]

# 프로그래머스 코드정확도 채점 - 합계: 27.3 / 100.0
# 다른 풀이 확인해보기 

# ----------------------------------------------------------------------------------------
# 21/07/25
# 스택과 큐의 개념을 다시 정리

# 문제 해석
# 각 기능들은 개발되는 속도가 다르지만, 배포되는 순서는 정해져 있다. 
# 하루단위로 작업이 이루어지고, 작업이 끝났을 때 진도가 100% 이상이라면 배포된다. 
# 이미 진도가 100% 이상인 기능이라도 배포되려면 선행 기능이 배포되어야한다. 
# 100% 이상인 기능들은 순서가 맞으면 같이 배포한다.

# 접근 방법
# 작업이 완성되어 기능을 내보내려면 가장 선행되는 기능을 먼저 내보내야하므로, 스택의 개념을 사용해 본다.
# ----위와 같은 경우에는 스택이 아닌 큐의 개념을 사용한다
# ----스택을 사용하면 가장 선행되는 기능(가장 먼저 들어온 기능)은 가장 마지막에 내보낼 수 있게 된다 

# 매 순환을 하루단위로 잡고, 순환마다 작업속도(speeds)의 값이 쌓이도록 계획을 세워본다.
# 작업속도의 값이 쌓여 배포조건(100% 이상)을 충족하면, 1을 더하여 배포준비가 되었음을 표시하되, 선행 기능이 배포될떄가지 대기하도록 식을 구상해본다.
# ----------------------------------------------------------------------------------------