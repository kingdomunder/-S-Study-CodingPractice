# 13.팩토리얼 진법 / 진법변환과 비트연산
# https://www.acmicpc.net/problem/5692

# ----------------------------------------------------------------------------------------

# 문제
# 상근이는 보통 사람들이 사는 것과는 조금 다른 삶을 사는 사람이다. 상근이는 이런 사람들의 시선이 부담스럽기 때문에, 자신만의 숫자를 개발하기로 했다. 
# 바로 그 이름은 팩토리얼 진법이다. 팩토리얼 진법은 각 자리에 올 수 있는 숫자는 0부터 9까지로 10진법과 거의 비슷하다. 하지만, 읽는 법은 조금 다르다. 
# 팩토리얼 진법에서는 i번 자리의 값을 ai×i!로 계산한다. 즉, 팩토리얼 진법에서 719는 10진법에서 53과 같다. 그 이유는 7×3! + 1×2! + 9×1! = 53이기 때문이다.

# 팩토리얼 진법으로 작성한 숫자가 주어졌을 때, 10진법으로 읽은 값을 구하는 프로그램을 작성하시오. 

# 입력
# 입력은 여러 개의 테스트 케이스로 이루어져 있다. 각 테스트 케이스는 한 줄로 이루어져 있고, 길이가 최대 5자리인 팩토리얼 진법 숫자가 주어진다. 입력의 마지막 줄에는 0이 하나 주어진다.

# 출력
# 각 테스트 케이스에 대해서, 입력으로 주어진 팩토리얼 진법 숫자를 10진법으로 읽은 값을 출력한다.

# 예제 입력 1 
# 719
# 1
# 15
# 110
# 102
# 0

# 예제 출력 1 
# 53
# 1
# 7
# 8
# 8

# ----------------------------------------------------------------------------------------

# 문제 해석 
# 719 -> 1번자리 9는 9x1! , 2번자리 1은 1x2!, 3번자리 7은 7x3! 으로 계산하고 각각의 값을 모두 더해준다 
# 입력의 마지막에 0을 입력받으면 이전의 숫자들을 팩토리얼 진법으로 받아들인다

# 접근 방법
# 입력할 때, 0을 입력받기 전까지의 숫자들을 팩토리얼 진법을 적용한다
# 길이는 최대 5자리이므로, 입력길이가 5를 초과하면 실행되지 않도록 한다
# 719 -> 100으로 나눈 몫은 7, 나머지는 19
# 19 -> 10으로 나눈 몫은 1, 나머지는 9
# 9 -> 1로 나눈 몫은 9, 나머지는 0 
# 각각 10의 0승, 1승, 2승으로 나누었으므로, 이를 파라미터로 적용하여 식을 구성해본다 

# ----------------------------------------------------------------------------------------

# 719를 입력했을 떄
# (7 * 3!) + (1 * 2!) + (9 * 1!)

import sys

numbers = []
while True:
    Input = int(sys.stdin.readline())
    # Input = int(input())
    if Input == 0:    # 0이면 입력종료
        break
    else:
        numbers.append(str(Input))   # 0이 아니면 입력받은 숫자를 리스트에 저장

for num in numbers:    # 리스트의 숫자 중 하나를 꺼내서 계산 시작 (num = 719)
    sum = 0
    for i in range(len(num)):    # 꺼낸숫자(num)의 길이를 파라미터로 사용  # i = 0,1,2  
        factorial = 1
        for j in range( (len(num)-i) ,0,-1):   # 파라미터를 이용해 팩토리얼도 구성 / i = 0 , j = 3,2,1   // i = 1 , j = 2,1 ...
            factorial *= j
        sum += ( int(num[i]) * factorial) 
    print(sum)

# ----------------------------------------------------------------------------------------

# 백준 채점 결과
# 시간초과 => input()이 원인으로 추정 => sys.stdin.readline() 사용하고 통과 

# 입력받은 숫자를 문자열로 만들어서 그 길이를 파라미터로 이용함

# readline()을 str화해서 "0"일 때 break에 걸리도록 하면 제대로 작동하지 않음(탈출하지 않고 무한루프)
# type()으로 확인하면 str이 맞는데, 왜 break 걸리지 않는지 추후 확인 필요함 
